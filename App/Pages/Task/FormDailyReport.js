import React, { useState, useCallback, useRef } from 'react'
import { Container, Header, Left, Body, Right, Button, Icon, Title, Content } from 'native-base';
import { Image, Text, TouchableOpacity, View, StatusBar, TextInput, ScrollView, Dimensions, Modal, Alert, ActivityIndicator } from 'react-native';
import { createRequestGlobalTimeOut } from 'App/Helpers/Http';

// STYLING USING
import * as Styles from 'App/Styles';
// REDUX USING
import AppActions from 'App/Redux/Actions';
import { useDispatch, } from 'react-redux';
import { useSelector } from 'react-redux';
// Components
import { selectImage, imageLoader } from 'App/Helpers/ImageLoader';
import ABSheet from 'App/Components/Widget/AnimatedBottomSheet';
import CalendarPicker from 'react-native-calendar-picker';
import PushNotification from "react-native-push-notification";


import * as Hooks from 'App/Helpers/Hooks';
import ImagePart from 'App/Components/Widget/ImagePart';


import * as Animatable from 'react-native-animatable';

const { width, height } = Dimensions.get('window');
var date = new Date();

export default function FormDailyReport(props) {
    const dispatch = useDispatch();
    const [title, setTitle] = useState('');
    const [note, setNote] = useState('');
    const [evidence, setEvindece] = useState([])
    const [fromDate, setFromDate] = useState(Hooks.getFormatDate(new Date(), false));
    const [toDate, setToDate] = useState();
    const [stringFromDate, setStringFromDate] = useState(Hooks.formatDate2(new Date()));
    const [stringToDate, setStringToDate] = useState('');
    const [modal, setModal] = useState(false);
    const [isLoading, setLoading] = useState(false);

    const apiToken = useSelector((state) => state.apiToken);

    let calendarPicker = useRef()


    const notification = () => {
        setTimeout(function () {
            PushNotification.localNotification({
                /* Android Only Properties */
                channelId: "Malintan2112", // (required) channelId, if the channel doesn't exist, notification will not trigger.
                /* iOS and Android properties */
                id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                title: "New Task Success", // (optional)
                message: "Task baru berhasil ditambahkan ", // (required)
                userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
                playSound: false, // (optional) default: true
                soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                number: 0, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            });
        }, 1000);

    }
    const postDaily = () => {
        setLoading(true)
        let data = new FormData();
        data.append("title", title);
        data.append("start_date", fromDate);
        data.append("note", note);

        for (let index = 0; index < evidence.length; index++) {
            data.append("evidence[]", evidence[index]);
        }
        fetch("https://malintan-projects.com/public/api/daily_reports", {
            method: 'POST',
            headers: {
                'Content-Type': 'multipart/form-data',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + apiToken
            },
            body: data
        })
            .then((response) => response.json())
            .then((responseData) => {
                console.log(responseData)
                if (responseData.status) {

                    setLoading(false)
                    notification();
                    props.route.params.refresh();
                    props.navigation.pop();
                } else {
                    Alert.alert(
                        "Daily Reports Message",
                        responseData.errors.email[0] ?? "Pastikan Data Anda Benar"
                        [
                        {
                            text: "Cancel",
                            onPress: () => console.log("Cancel Pressed"),
                            style: "cancel"
                        },
                        { text: "OK", onPress: () => console.log("OK Pressed") }
                        ]
                    );
                    setLoading(false)

                }

            }).catch(() => {


            })
            .done();

    }
    const removeImage = (index) => {
        const temp = [...evidence];
        if (index > -1) {
            temp.splice(index, 1);
        }
        setEvindece(temp);

    }
    const dummyAddImage = () => {
        const component = [];
        for (let index = 0; index < evidence.length; index++) {
            component.push(
                <View key={'ai ' + index} style={{ position: 'relative' }}>
                    <Image source={{ uri: evidence[index].uri }} style={{ width: 45, height: 45, borderRadius: 5 }} />
                    <TouchableOpacity
                        onPress={() => {

                            Alert.alert(
                                "Daily Reports Message",
                                "Do you want to delete this evidence ?",
                                [
                                    {
                                        text: "Cancel",
                                        onPress: () => console.log(),
                                        style: "cancel"
                                    },
                                    { text: "OK", onPress: () => removeImage(index) }
                                ]
                            );
                        }}
                        style={{ width: 18, height: 18, backgroundColor: "#444444", position: 'absolute', right: -5, top: -5, borderRadius: 9, justifyContent: "center", alignItems: 'center', opacity: 0.7 }}>
                        <Icon type="FontAwesome" name="close" style={{ fontSize: 8, color: Styles.Colors.trueWhite, }} />
                    </TouchableOpacity>

                </View>
            )

        }
        for (let index = 0; index < 5 - evidence.length; index++) {
            component.push(
                <View key={'add Image ' + index}>
                    <TouchableOpacity onPress={useCamera}>
                        <Image source={Styles.Images.add_photo} style={{ width: 45, height: 45 }} />
                    </TouchableOpacity>
                </View>
            )

        }
        return component;
    }
    const processImage = (payload) => {
        let split_path = payload.path.split('/');
        let alternateFilename = split_path[split_path.length - 1];

        let image_data = {
            uri: payload.path,
            type: payload.mime,
            name: payload.filename || alternateFilename,

        }

        return image_data;
    }
    const useCamera = () => {
        selectImage('custom', false, {}, 'picker',
            {
                includeBase64: false,
                compressImageQuality: 0.1,
                mediaType: 'photo',
                forceJpg: true,
            },
            true).then((result) => {
                Hooks.consoleLog('Image Camera', result)
                const temp = [...evidence];
                temp.push(processImage(result));
                setEvindece(current => current = temp);
            }).catch((err) => {
                Hooks.consoleError(`UploadImage Error`, err.message);
            });
    }
    const onDateChange = (date, type) => {
        if (type === 'END_DATE') {
            setToDate(Hooks.getFormatDate(date, false))
            setStringToDate(Hooks.getDateString(date))
        }
        else {
            setToDate(null)
            setStringToDate('')
            setStringFromDate(Hooks.formatDate2(date))
            setFromDate(Hooks.getFormatDate(date, false))
            setModal(false);

        }
    }
    const renderCalendarPicker = () => {
        return (
            <Modal
                transparent={false}
                animationType="slide"
                visible={modal}
                onRequestClose={() => { setModal(false) }}
            >
                <View>
                    <TouchableOpacity style={{ width: '100%', backgroundColor: Styles.Colors.trueWhite, paddingTop: 20, marginLeft: 20 }} onPress={() => { setModal(false) }}>
                        <Animatable.View animation={'slideInRight'} style={{ flexDirection: 'row' }}>
                            <View style={{ width: 45, elevation: 5, height: 45, borderRadius: 25, justifyContent: "center", alignItems: 'center', backgroundColor: Styles.Colors.trueWhite, }} >
                                <Icon type="FontAwesome" name="chevron-left" style={{ fontSize: 15, color: Styles.Colors.black, marginRight: 5, }} />
                            </View>
                            <View style={{ width: width * 0.8, marginLeft: 10, marginBottom: 40, }}>
                                <Text style={{ fontSize: 12, color: Styles.Colors.black, fontWeight: "800" }}>Set Date</Text>
                                <Text style={{ fontSize: 30, color: Styles.Colors.black, fontWeight: "bold", marginTop: -5 }}>Form Report  </Text>
                            </View>
                        </Animatable.View>
                    </TouchableOpacity>
                    <View style={[
                        Styles.Helpers.mainSpaceBetween,
                        { backgroundColor: Styles.Colors.trueWhite }
                    ]}>
                        <CalendarPicker
                            weekdays={['Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab', 'Min']}
                            months={['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']}
                            startFromMonday={true}
                            allowRangeSelection={false}
                            allowBackwardRangeSelect={false}
                            previousComponent={
                                <Icon
                                    name={'chevron-left'}
                                    type={'MaterialCommunityIcons'}
                                    style={{
                                        color: Styles.Colors.black,
                                        fontSize: 35,
                                    }}
                                />
                            }
                            nextComponent={
                                <Icon
                                    name={'chevron-right'}
                                    type={'MaterialCommunityIcons'}
                                    style={{
                                        color: Styles.Colors.black,
                                        fontSize: 35,
                                    }}
                                />
                            }
                            textStyle={Styles.Fonts.paragraph_12_reg}
                            todayBackgroundColor={Styles.Colors.black}
                            selectedDayColor={Styles.Colors.primary}
                            selectedDayTextColor={Styles.Colors.trueWhite}
                            selectedStartDate={fromDate}
                            selectedEndDate={toDate}
                            restrictMonthNavigation={true}
                            selectMonthTitle={'Pilih Bulan di '}
                            selectYearTitle={'Pilih Tahun'}
                            // scaleFactor={width + 50}
                            //minDate={moment(new Date()).subtract(12, 'months')}
                            //maxDate={new Date()}
                            onDateChange={onDateChange.bind(this)}
                        />


                    </View>
                </View>
            </Modal>

        );
    }

    return (
        <Container>
            <View style={[Styles.Helpers.fullSize, Styles.Helpers.center, { backgroundColor: Styles.Colors.trueWhite, height: width * 0.8, flex: 1, position: "relative" }]}>
                <ScrollView showsVerticalScrollIndicator={false}>

                    <View style={{ height: 100 }}>

                    </View>
                    <View style={{ width: width * 0.8, marginVertical: 10 }}>
                        <Text style={{ fontSize: 12, color: Styles.Colors.gray_var1, }}>Task Date : </Text>
                    </View>
                    <TouchableOpacity onPress={() => { setModal(true) }} style={[{ width: width * 0.8, height: 45, borderWidth: 1, borderColor: '#d8d8d8', borderRadius: 10, paddingHorizontal: 20, justifyContent: 'space-between', flexDirection: 'row', alignItems: "center" }]}>
                        <Text style={{ fontSize: 12, color: stringFromDate != '' ? Styles.Colors.black : Styles.Colors.gray_var1 }}>{stringFromDate != '' ? `${stringFromDate}` : "Input Your Task Date"}</Text>
                        <Icon type="FontAwesome" name="calendar" style={{ fontSize: 15, color: Styles.Colors.black }} />
                    </TouchableOpacity>
                    <View style={{ width: width * 0.8, marginVertical: 10, flexDirection: 'row' }}>
                        {title == '' || title.length < 10 ? <Text style={{ fontSize: 8, marginTop: 0, color: 'red', fontWeight: "bold", alignItems: 'flex-end', textAlign: 'right' }}>* </Text> : null}
                        <Text style={{ fontSize: 12, color: Styles.Colors.gray_var1, }}>Task Title : </Text>
                    </View>
                    <View style={[{ width: width * 0.8, height: 45, borderWidth: 1, borderColor: '#d8d8d8', borderRadius: 10, paddingHorizontal: 20, justifyContent: 'center' }]}>
                        <TextInput
                            placeholder="Input Task Title (Min 10 Character)"
                            style={{ fontSize: 12 }}
                            value={title}
                            onChangeText={(text) => setTitle(text)}
                        />
                    </View>

                    <View style={{ width: width * 0.8, marginVertical: 10, flexDirection: 'row' }}>
                        {evidence.length == 0 ? <Text style={{ fontSize: 8, marginTop: 0, color: 'red', fontWeight: "bold", alignItems: 'flex-end', textAlign: 'right' }}>* </Text> : null}
                        <Text style={{ fontSize: 12, color: Styles.Colors.gray_var1, }}>Task Evidence : </Text>
                    </View>
                    <View style={[{ width: width * 0.8, height: 45, borderRadius: 10, justifyContent: 'space-between', flexDirection: 'row', alignItems: "center" }]}>

                        {dummyAddImage()}
                    </View>

                    <View style={{ width: width * 0.8, marginVertical: 10, flexDirection: 'row' }}>
                        {note == '' || note.length < 20 ? <Text style={{ fontSize: 8, marginTop: 0, color: 'red', fontWeight: "bold", alignItems: 'flex-end', textAlign: 'right' }}>* </Text> : null}
                        <Text style={{ fontSize: 12, color: Styles.Colors.gray_var1, }}>Task Note : </Text>
                    </View>
                    <View style={[{ width: width * 0.8, height: 100, borderWidth: 1, borderColor: '#d8d8d8', borderRadius: 10, paddingHorizontal: 20, }]}>
                        <TextInput
                            placeholder="Input Task Note (Min 20 Character) "
                            style={{ fontSize: 12 }}
                            multiline={true}
                            value={note}
                            onChangeText={(text) => setNote(text)}
                        />
                    </View>
                </ScrollView>

                <TouchableOpacity style={{ top: 0, left: 20, position: 'absolute', width: '100%', backgroundColor: Styles.Colors.trueWhite, paddingTop: 20 }} onPress={() => { props.navigation.pop() }}>
                    <Animatable.View animation={'slideInRight'} style={{ flexDirection: 'row' }}>
                        <View style={{ width: 45, elevation: 5, height: 45, borderRadius: 25, justifyContent: "center", alignItems: 'center', backgroundColor: Styles.Colors.trueWhite, }} >
                            <Icon type="FontAwesome" name="chevron-left" style={{ fontSize: 15, color: Styles.Colors.black, marginRight: 5, }} />
                        </View>
                        <View style={{ width: width * 0.8, marginLeft: 10, marginBottom: 40, }}>
                            <Text style={{ fontSize: 12, color: Styles.Colors.black, fontWeight: "800" }}>Form</Text>
                            <Text style={{ fontSize: 30, color: Styles.Colors.black, fontWeight: "bold", marginTop: -5 }}>Daily Reports   </Text>
                        </View>
                    </Animatable.View>
                </TouchableOpacity>
                <TouchableOpacity
                    onPress={postDaily}
                    disabled={title.length < 10 || note.length < 20 || evidence.length == 0 || stringFromDate == '' || isLoading}
                    style={[{ width: "100%", paddingHorizontal: 20, alignItems: "center", marginTop: 30, marginBottom: 10 }]}>
                    <View style={[{ width: width * 0.8, height: 45, backgroundColor: Styles.Colors.primary, borderRadius: 10, justifyContent: "center", opacity: title.length < 10 || note.length < 20 || evidence.length == 0 || stringFromDate == '' || isLoading ? 0.5 : 1 }]}>
                        {isLoading ? (<ActivityIndicator size="small" color="white" />) : <Text style={{ textAlign: 'center', color: "white", fontWeight: "700" }}>Submit</Text>}
                    </View>
                </TouchableOpacity>
            </View>
            {renderCalendarPicker()}

        </Container>
    )
}

